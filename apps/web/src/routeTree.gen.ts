/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as PortalImport } from './routes/_portal'
import { Route as PortalIndexImport } from './routes/_portal/index'
import { Route as PortalAboutImport } from './routes/_portal/about'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const PortalRoute = PortalImport.update({
  id: '/_portal',
  getParentRoute: () => rootRoute,
} as any)

const PortalIndexRoute = PortalIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PortalRoute,
} as any)

const PortalAboutRoute = PortalAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PortalRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_portal': {
      id: '/_portal'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PortalImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_portal/about': {
      id: '/_portal/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PortalAboutImport
      parentRoute: typeof PortalImport
    }
    '/_portal/': {
      id: '/_portal/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PortalIndexImport
      parentRoute: typeof PortalImport
    }
  }
}

// Create and export the route tree

interface PortalRouteChildren {
  PortalAboutRoute: typeof PortalAboutRoute
  PortalIndexRoute: typeof PortalIndexRoute
}

const PortalRouteChildren: PortalRouteChildren = {
  PortalAboutRoute: PortalAboutRoute,
  PortalIndexRoute: PortalIndexRoute,
}

const PortalRouteWithChildren =
  PortalRoute._addFileChildren(PortalRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PortalRouteWithChildren
  '/login': typeof LoginRoute
  '/about': typeof PortalAboutRoute
  '/': typeof PortalIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/about': typeof PortalAboutRoute
  '/': typeof PortalIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_portal': typeof PortalRouteWithChildren
  '/login': typeof LoginRoute
  '/_portal/about': typeof PortalAboutRoute
  '/_portal/': typeof PortalIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/about' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/about' | '/'
  id: '__root__' | '/_portal' | '/login' | '/_portal/about' | '/_portal/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PortalRoute: typeof PortalRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  PortalRoute: PortalRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_portal",
        "/login"
      ]
    },
    "/_portal": {
      "filePath": "_portal.tsx",
      "children": [
        "/_portal/about",
        "/_portal/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_portal/about": {
      "filePath": "_portal/about.tsx",
      "parent": "/_portal"
    },
    "/_portal/": {
      "filePath": "_portal/index.tsx",
      "parent": "/_portal"
    }
  }
}
ROUTE_MANIFEST_END */
